// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopsRUs.Data;

namespace ShopsRUs.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210302104538_MapInvoiceDetailsCollectionToInvoice")]
    partial class MapInvoiceDetailsCollectionToInvoice
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("ShopsRUs.Entities.DiscountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRatePercentage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DiscountType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsRatePercentage = true,
                            Name = "Affiliate Discount",
                            Rate = 10m,
                            Type = "Affiliate"
                        },
                        new
                        {
                            Id = 2,
                            IsRatePercentage = true,
                            Name = "Employee Discount",
                            Rate = 30m,
                            Type = "Employee"
                        },
                        new
                        {
                            Id = 3,
                            IsRatePercentage = true,
                            Name = "Loyal Customer Discount",
                            Rate = 5m,
                            Type = "Customer"
                        },
                        new
                        {
                            Id = 4,
                            IsRatePercentage = false,
                            Name = "Price Discount",
                            Rate = 5m,
                            Type = "Price"
                        });
                });

            modelBuilder.Entity("ShopsRUs.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasMaxLength(25)
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            DateCreated = new DateTime(2021, 3, 2, 11, 45, 37, 94, DateTimeKind.Local).AddTicks(2936),
                            InvoiceNumber = "SRU001",
                            OrderId = 1,
                            Total = 500m,
                            UserId = 1
                        },
                        new
                        {
                            InvoiceId = 2,
                            DateCreated = new DateTime(2021, 3, 2, 11, 45, 37, 94, DateTimeKind.Local).AddTicks(5779),
                            InvoiceNumber = "SRU002",
                            OrderId = 2,
                            Total = 1500m,
                            UserId = 2
                        },
                        new
                        {
                            InvoiceId = 3,
                            DateCreated = new DateTime(2021, 3, 2, 11, 45, 37, 94, DateTimeKind.Local).AddTicks(5786),
                            InvoiceNumber = "SRU003",
                            OrderId = 3,
                            Total = 990m,
                            UserId = 3
                        },
                        new
                        {
                            InvoiceId = 4,
                            DateCreated = new DateTime(2021, 3, 2, 11, 45, 37, 94, DateTimeKind.Local).AddTicks(5788),
                            InvoiceNumber = "SRU004",
                            OrderId = 4,
                            Total = 920m,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("ShopsRUs.Entities.InvoiceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DerivedProductCost")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProductPrice")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductQuantity")
                        .HasMaxLength(30)
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalDerivedCost")
                        .HasColumnType("decimal(19, 2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DerivedProductCost = 40m,
                            DiscountPrice = 2m,
                            InvoiceId = 1,
                            ProductId = 2,
                            ProductName = "Item 2",
                            ProductPrice = 20m,
                            ProductQuantity = 2,
                            TotalDerivedCost = 38m
                        },
                        new
                        {
                            Id = 2,
                            DerivedProductCost = 482m,
                            DiscountPrice = 20m,
                            InvoiceId = 1,
                            ProductId = 4,
                            ProductName = "Item 4",
                            ProductPrice = 482m,
                            ProductQuantity = 1,
                            TotalDerivedCost = 462m
                        },
                        new
                        {
                            Id = 3,
                            DerivedProductCost = 250m,
                            DiscountPrice = 0m,
                            InvoiceId = 2,
                            ProductId = 40,
                            ProductName = "Item 40",
                            ProductPrice = 50m,
                            ProductQuantity = 5,
                            TotalDerivedCost = 250m
                        },
                        new
                        {
                            Id = 4,
                            DerivedProductCost = 250m,
                            DiscountPrice = 25m,
                            InvoiceId = 3,
                            ProductId = 3,
                            ProductName = "Item 3",
                            ProductPrice = 50m,
                            ProductQuantity = 5,
                            TotalDerivedCost = 225m
                        },
                        new
                        {
                            Id = 5,
                            DerivedProductCost = 400m,
                            DiscountPrice = 20m,
                            InvoiceId = 3,
                            ProductId = 5,
                            ProductName = "Item 5",
                            ProductPrice = 400m,
                            ProductQuantity = 1,
                            TotalDerivedCost = 380m
                        },
                        new
                        {
                            Id = 6,
                            DerivedProductCost = 385m,
                            DiscountPrice = 0m,
                            InvoiceId = 3,
                            ProductId = 15,
                            ProductName = "Item 15",
                            ProductPrice = 77m,
                            ProductQuantity = 5,
                            TotalDerivedCost = 385m
                        },
                        new
                        {
                            Id = 7,
                            DerivedProductCost = 1000m,
                            DiscountPrice = 80m,
                            InvoiceId = 4,
                            ProductId = 105,
                            ProductName = "Item 105",
                            ProductPrice = 200m,
                            ProductQuantity = 5,
                            TotalDerivedCost = 920m
                        });
                });

            modelBuilder.Entity("ShopsRUs.Entities.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DateCreated = new DateTime(2018, 3, 2, 11, 45, 37, 92, DateTimeKind.Local).AddTicks(626),
                            Email = "user1@email.com",
                            FirstName = "Sheldon",
                            LastName = "Cooper",
                            MiddleName = "Lee",
                            PhoneNumber = "123456789",
                            UserType = "Customer"
                        },
                        new
                        {
                            UserId = 2,
                            DateCreated = new DateTime(2020, 12, 2, 11, 45, 37, 92, DateTimeKind.Local).AddTicks(732),
                            Email = "user2@email.com",
                            FirstName = "Leonard",
                            LastName = "Hoffsteder",
                            MiddleName = "Lee",
                            PhoneNumber = "12345678910",
                            UserType = "Customer"
                        },
                        new
                        {
                            UserId = 3,
                            DateCreated = new DateTime(2020, 3, 2, 11, 45, 37, 92, DateTimeKind.Local).AddTicks(739),
                            Email = "user3@email.com",
                            FirstName = "Penny",
                            LastName = "Jackson",
                            MiddleName = "L.",
                            PhoneNumber = "123456789",
                            UserType = "Affiliate"
                        },
                        new
                        {
                            UserId = 4,
                            DateCreated = new DateTime(2016, 3, 2, 11, 45, 37, 92, DateTimeKind.Local).AddTicks(744),
                            Email = "user4@email.com",
                            FirstName = "Amy",
                            LastName = "Fowler",
                            PhoneNumber = "123456789",
                            UserType = "Employee"
                        },
                        new
                        {
                            UserId = 5,
                            DateCreated = new DateTime(2018, 3, 2, 11, 45, 37, 92, DateTimeKind.Local).AddTicks(747),
                            Email = "user5@email.com",
                            FirstName = "Raj",
                            LastName = "Koothrappali",
                            PhoneNumber = "123456789",
                            UserType = "Employee"
                        });
                });

            modelBuilder.Entity("ShopsRUs.Entities.Invoice", b =>
                {
                    b.HasOne("ShopsRUs.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ShopsRUs.Entities.InvoiceDetails", b =>
                {
                    b.HasOne("ShopsRUs.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });
#pragma warning restore 612, 618
        }
    }
}
